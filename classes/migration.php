<?php defined('SYSPATH') OR die('No direct access allowed.');
/**
 * Sprig migration abstract class.
 *
 * @package		Migration
 * @author		Oliver Morgan
 * @uses		DBForge
 * @copyright	(c) 2009 Oliver Morgan
 * @license		MIT
 */
abstract class Migration {
	
	/**
	 * The array of tables associated with the model.
	 * 
	 * @param	mixed	The model identifier.
	 * @param	string	The migration driver.
	 */
	public static function factory($model, $driver = NULL)
	{
		if ($driver === NULL)
		{
			if ((is_object($model) OR $model = Model::factory($model)) AND $model instanceof Model_Migratable)
			{
				return new Migration_Interface($model);
			}
			else
			{
				throw new Kohana_Exception('Migration models given without a supported driver must implament the migratable interface.');
			}
		}
		
		$class = 'Migration_'.ucfirst($driver);
		
		if (class_exists($class))
		{
			return new $class($model);
		}
		
		throw new Kohana_Exception('Migration driver :driver could not be found.', array(
			':driver'	=> $driver
		));
	}
	
	/**
	 * The database object
	 * 
	 * @var	Database
	 */
	protected $_db;
	
	/**
	 * The array of tables associated with the model.
	 * 
	 * @var	array
	 */
	protected $_tables;
	
	/**
	 * The model object.
	 * 
	 * @var	object
	 */
	protected $_model;
	
	/**
	 * The migration construct.
	 * 
	 * @param	mixed	An identifier used by the migration driver to get the model object.
	 */
	protected function __construct($model)
	{
		$this->_model = $this->_model($model);
		
		$this->_db = $this->_db();
		
		$this->_tables = $this->_tables();
	}
	
	/**
	 * Removed existing tables and 
	 * 
	 * @param	array	The options array given to the table(s) to compile with.
	 * @return void	
	 */
	public function rebuild( array $options = array())
	{
		$this->remove()->sync($options);
	}
	
	/**
	 * Remove all tables associated with the model if they already exist in the database.
	 * 
	 * @return	void
	 */
	public function remove()
	{
		foreach ($this->_tables as $table)
		{
			if($table = Database_Table::instance($table->name, $table->database))
			{
				$table->drop();
			}
		}
		
		return $this;
	}
	
	/**
	 * Syncs the model with the database schema.
	 * 
	 * @param	array	The options array given to the table(s) to compile with.
	 * @return	void
	 */
	public function sync( array $options = array())
	{
		$sql = '';
		
		foreach ($this->_tables as $table)
		{
			$tables = $this->_db->list_tables($table->name);
			
			while (list($key, $value) = each($options))
			{
				$table->add_option($key, $value);
			}
			
			if (empty($tables))
			{
				$table->create();
			}
			else
			{
				$alter = DB::alter($table->name);
				$columns = $this->_db->list_columns($table->name);
				
				foreach ($table->columns() as $name => $column)
				{
					if (isset($columns[$column->name]))
					{
						$alter->modify($column)
							->compile($this->_db);
					}
					else
					{
						$alter->add($column)
							->execute($this->_db);
					}
					
					unset($columns[$name]);
				}
				
				foreach ($columns as $name => $column)
				{
					$alter->drop($name);
				}
				
				foreach ($table->constraints() as $constraint)
				{
					try
					{
						$constraint->drop($table->name, $this->_db);
					}
					catch (Exception $e) { }
					
					try
					{
						$alter->add($constraint);
					}
					catch (Exception $e) { }
				}
			}
		}
		
		return $this;
	}
	
	/**
	 * Gets the model object associated with the model identifier.
	 * 
	 * @param	array	The options array given to the table(s).
	 * @return	object	The model object.
	 */
	abstract protected function _model($model);
	
	/**
	 * Returns the database object used by the model.
	 * 
	 * @return	Database	The database object.
	 */
	abstract protected function _database();
	
	/**
	 * Gets the array of tables generated by the model.
	 * 
	 * @return	array	The list of tables.
	 */
	abstract protected function _db();
	
} // End Migration